{
  "id": "663997304868339728",
  "repoSource": "github.com",
  "repoOwner": "estafette",
  "repoName": "estafette-ci-api",
  "repoBranch": "main",
  "repoRevision": "dc8fb4c20f48705ad28b36b41c3614e25664fe32",
  "buildVersion": "1.0.0-main-1722",
  "buildStatus": "succeeded",
  "labels": [
    {
      "key": "app-group",
      "value": "estafette-ci"
    },
    {
      "key": "language",
      "value": "golang"
    },
    {
      "key": "team",
      "value": "estafette"
    },
    {
      "key": "type",
      "value": "service"
    }
  ],
  "releaseTargets": [
    {
      "name": "tooling-estafette",
      "actions": [
        {
          "name": "deploy-canary"
        },
        {
          "name": "deploy-stable"
        },
        {
          "name": "rollback-canary",
          "hideBadge": true
        },
        {
          "name": "restart-stable",
          "hideBadge": true
        }
      ],
      "activeReleases": [
        {
          "name": "tooling-estafette",
          "action": "deploy-stable",
          "id": "664373458571591697",
          "repoSource": "github.com",
          "repoOwner": "estafette",
          "repoName": "estafette-ci-api",
          "releaseVersion": "1.0.0-main-1728",
          "releaseStatus": "succeeded",
          "triggerEvents": [
            {
              "fired": true,
              "manual": {
                "userID": "me@estafette.io"
              }
            }
          ],
          "insertedAt": "2021-06-04T15:38:09.260982Z",
          "startedAt": "2021-06-04T15:38:11.572968Z",
          "updatedAt": "2021-06-04T15:39:25.13434Z",
          "duration": 73000000000,
          "pendingDuration": 2000000000,
          "extraInfo": {
            "medianPendingDuration": 2000000000,
            "medianDuration": 77000000000
          }
        },
        {
          "name": "tooling-estafette",
          "action": "deploy-canary",
          "id": "664372945397841937",
          "repoSource": "github.com",
          "repoOwner": "estafette",
          "repoName": "estafette-ci-api",
          "releaseVersion": "1.0.0-main-1728",
          "releaseStatus": "succeeded",
          "triggerEvents": [
            {
              "fired": true,
              "manual": {
                "userID": "me@estafette.io"
              }
            }
          ],
          "insertedAt": "2021-06-04T15:35:32.652756Z",
          "startedAt": "2021-06-04T15:35:34.746145Z",
          "updatedAt": "2021-06-04T15:36:09.231216Z",
          "duration": 34000000000,
          "pendingDuration": 2000000000,
          "extraInfo": {
            "medianPendingDuration": 2000000000,
            "medianDuration": 20000000000
          }
        },
        {
          "name": "tooling-estafette",
          "action": "restart-stable",
          "id": "664308454879461393",
          "repoSource": "github.com",
          "repoOwner": "estafette",
          "repoName": "estafette-ci-api",
          "releaseVersion": "1.0.0-main-1722",
          "releaseStatus": "succeeded",
          "triggerEvents": [
            {
              "fired": true,
              "manual": {
                "userID": "me@estafette.io"
              }
            }
          ],
          "insertedAt": "2021-06-04T10:07:31.708355Z",
          "startedAt": "2021-06-04T10:07:33.422702Z",
          "updatedAt": "2021-06-04T10:08:33.80782Z",
          "duration": 60000000000,
          "pendingDuration": 1000000000,
          "extraInfo": {
            "medianPendingDuration": 3000000000,
            "medianDuration": 90000000000
          }
        },
        {
          "name": "tooling-estafette",
          "action": "rollback-canary",
          "id": "663722926313242642",
          "repoSource": "github.com",
          "repoOwner": "estafette",
          "repoName": "estafette-ci-api",
          "releaseVersion": "1.0.0-main-1710",
          "releaseStatus": "succeeded",
          "triggerEvents": [
            {
              "fired": true,
              "manual": {
                "userID": "me@estafette.io"
              }
            }
          ],
          "insertedAt": "2021-06-02T08:29:22.570649Z",
          "startedAt": "2021-06-02T08:29:24.685091Z",
          "updatedAt": "2021-06-02T08:29:42.049986Z",
          "duration": 17000000000,
          "pendingDuration": 2000000000,
          "extraInfo": {
            "medianPendingDuration": 3000000000,
            "medianDuration": 17000000000
          }
        }
      ]
    },
    {
      "name": "release-helm-chart"
    },
    {
      "name": "helm-diff",
      "activeReleases": [
        {
          "name": "helm-diff",
          "id": "503219038331437061",
          "repoSource": "github.com",
          "repoOwner": "estafette",
          "repoName": "estafette-ci-api",
          "releaseVersion": "1.0.0-add-official-helm-chart-892",
          "releaseStatus": "succeeded",
          "triggerEvents": [
            {
              "manual": {
                "userID": "me@estafette.io"
              }
            }
          ],
          "insertedAt": "2019-11-13T10:24:23.162207Z",
          "updatedAt": "2019-11-13T10:24:46.091556Z",
          "duration": 22000000000,
          "pendingDuration": 0
        }
      ]
    }
  ],
  "manifest": "builder:\n  track: dev\n  medium: memory\n\nlabels:\n  type: service\n  app-group: estafette-ci\n  team: estafette\n  language: golang\n\nversion:\n  semver:\n    major: 1\n    minor: 0\n    patch: 0\n    labelTemplate: '{{branch}}-{{auto}}'\n    releaseBranch: 1.0.0\n\ntriggers:\n- name: migrator\n  pipeline:\n    name: github.com/estafette/estafette-ci-db-migrator\n    branch: main\n  builds:\n    branch: main\n\nstages:\n  build-lint-and-package:\n    parallelStages:\n      build:\n        image: golang:1.16-alpine\n        env:\n          CGO_ENABLED: 0\n          GOOS: linux\n          GOGC: off\n        commands:\n        - go build -a -installsuffix cgo -ldflags \"-X main.appgroup=${ESTAFETTE_LABEL_APP_GROUP} -X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}\" -o ./publish/${ESTAFETTE_GIT_NAME} .\n\n      test:\n        image: golang:1.16-alpine\n        commands:\n        - apk add --update --no-cache build-base\n        - go test -short -race ./...\n\n      lint-helm-chart:\n        image: extensions/helm:dev\n        action: lint\n\n      package-helm-chart:\n        image: extensions/helm:dev\n        action: package\n\n  integration-tests-prepare:\n    services:\n    - name: estafette-ci-db-public\n      multiStage: true\n      image: cockroachdb/cockroach:v21.1.1\n      shell: /bin/bash\n      env:\n        COCKROACH_SKIP_ENABLING_DIAGNOSTIC_REPORTING: \"true\"\n      readiness:\n        path: /health?ready=1\n        port: 8080\n        timeoutSeconds: 120\n      commands:\n      - /cockroach/cockroach start-single-node --insecure --advertise-addr estafette-ci-db-public\n\n    image: estafette/estafette-ci-db-migrator:${ESTAFETTE_TRIGGER_MIGRATOR_BUILD_VERSION}\n    env:\n      COCKROACH_INSECURE: true\n      ESTAFETTE_LOG_FORMAT: console\n\n  integration-tests:\n    image: golang:1.16-alpine\n    env:\n      CGO_ENABLED: 0\n      GOOS: linux\n      GOGC: off\n    commands:\n    - go test -run TestIntegration ./...\n\n  bake:\n    image: extensions/docker:dev\n    action: build\n    severity: unknown\n    inline: |\n      FROM scratch\n\n      LABEL maintainer=\"estafette.io\" \\\n            description=\"The ${ESTAFETTE_GIT_NAME} is the component that handles api requests and starts build jobs using the estafette-ci-builder\"\n\n      COPY ca-certificates.crt /etc/ssl/certs/\n      COPY ${ESTAFETTE_GIT_NAME} /\n\n      ENV GRACEFUL_SHUTDOWN_DELAY_SECONDS=\"20\" \\\n          ESTAFETTE_LOG_FORMAT=\"json\"\n\n      ENTRYPOINT [\"/${ESTAFETTE_GIT_NAME}\"]\n    repositories:\n    - estafette\n    path: ./publish\n    copy:\n    - /etc/ssl/certs/ca-certificates.crt\n\n  push-to-docker-hub:\n    image: extensions/docker:dev\n    action: push\n    repositories:\n    - estafette\n\n  test-helm-chart-1.17:\n    services:\n    - name: kubernetes\n      image: bsycorp/kind:latest-1.17\n      readiness:\n        path: /kubernetes-ready\n        port: 10080\n        timeoutSeconds: 120\n    image: extensions/helm:dev\n    action: test\n    values: |-\n      deployment:\n        env:\n        - name: JAEGER_DISABLED\n          value: 'true'\n      secret:\n        files:\n          secretDecryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n      ingress:\n        enabled: true\n        hosts:\n        - host: ci.estafette.io\n          paths:\n          - path: /api/\n            backend:\n              serviceName: estafette-ci-api\n              servicePort: http\n          - path: /\n            backend:\n              serviceName: estafette-ci-web\n              servicePort: http\n      ingressWebhooks:\n        enabled: true\n        hosts:\n        - host: ci-webhook.estafette.io\n          paths:\n          - path: /api/integrations/github/\n            backend:\n              serviceName: estafette-ci-api\n              servicePort: http\n\n      extraLabels:\n        team: estafette\n\n      extraSecrets:\n      - key: gcp\n        annotations: {}\n        mountPath: /gcp\n        data:\n          service-account-key.json: |\n            {}\n\n      extraConfigmaps:\n      - key: templates\n        annotations: {}\n        mountPath: /templates\n        data: |\n          manifest-docker.tmpl: |\n            labels:\n              container: {{.ContainerName}}\n              team: {{.TeamName}}\n              language: docker\n\n            stages:\n              bake:\n                image: extensions/docker:stable\n                action: build\n                repositories:\n                - estafette\n\n              push-to-docker-registry:\n                image: extensions/docker:stable\n                action: push\n                repositories:\n                - estafette\n\n  test-helm-chart-1.19:\n    services:\n    - name: kubernetes\n      image: bsycorp/kind:latest-1.19\n      readiness:\n        path: /kubernetes-ready\n        port: 10080\n        timeoutSeconds: 120\n    image: extensions/helm:dev\n    action: test\n    values: |-\n      deployment:\n        env:\n        - name: JAEGER_DISABLED\n          value: 'true'\n      secret:\n        files:\n          secretDecryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n      ingress:\n        enabled: true\n        hosts:\n        - host: ci.estafette.io\n          paths:\n          - path: /api/\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-api\n                port:\n                  name: http\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-web\n                port:\n                  name: http\n      ingressWebhooks:\n        enabled: true\n        hosts:\n        - host: ci-webhook.estafette.io\n          paths:\n          - path: /api/integrations/github/\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-api\n                port:\n                  name: http\n\n      extraLabels:\n        team: estafette\n\n      extraSecrets:\n      - key: gcp\n        annotations: {}\n        mountPath: /gcp\n        data:\n          service-account-key.json: |\n            {}\n\n      extraConfigmaps:\n      - key: templates\n        annotations: {}\n        mountPath: /templates\n        data: |\n          manifest-docker.tmpl: |\n            labels:\n              container: {{.ContainerName}}\n              team: {{.TeamName}}\n              language: docker\n\n            stages:\n              bake:\n                image: extensions/docker:stable\n                action: build\n                repositories:\n                - estafette\n\n              push-to-docker-registry:\n                image: extensions/docker:stable\n                action: push\n                repositories:\n                - estafette\n\n  clone-charts-repo:\n    image: extensions/git-clone:dev\n    repo: helm-charts\n    branch: main\n\n  publish-helm-chart:\n    image: extensions/helm:dev\n    action: publish\n    repoBranch: main\n\n  slack-notify:\n    image: extensions/slack-build-status:dev\n    workspace: estafette\n    channels:\n    - '#build-status'\n    when:\n      status == 'succeeded' ||\n      status == 'failed'\n\nreleases:\n  tooling-estafette:\n    actions:\n    - name: deploy-canary\n    - name: deploy-stable\n    - name: rollback-canary\n      hideBadge: true\n    - name: restart-stable\n      hideBadge: true\n    clone: true\n    stages:\n      deploy:\n        image: extensions/gke:dev\n        namespace: estafette-ci\n        visibility: iap\n        iapOauthClientID: ***\n        iapOauthClientSecret: ***\n        imagePullSecretUser: ***\n        imagePullSecretPassword: ***\n        container:\n          repository: estafette\n          env:\n            ESTAFETTE_LOG_FORMAT: v3\n            CONFIG_FILE_PATH: /configs/git/config.yaml\n          cpu:\n            request: 50m\n          memory:\n            request: 283Mi\n            limit: 283Mi\n          metrics:\n            port: 9001\n          lifecycle:\n            prestopsleep: false\n        sidecars:\n        - type: openresty\n          cpu:\n            request: 23m\n          memory:\n            request: 83Mi\n            limit: 83Mi\n        customsidecars:\n        - name: estafette-ci-api-git-sync\n          image: k8s.gcr.io/git-sync:v3.1.5\n          env:\n          - name: GIT_SYNC_REPO\n            value: \"***\"\n          - name: GIT_SYNC_BRANCH\n            value: \"git-sync\"\n          - name: GIT_SYNC_DEPTH\n            value: \"1\"\n          - name: GIT_SYNC_ROOT\n            value: \"/configs\"\n          - name: GIT_SYNC_DEST\n            value: \"git\"\n          - name: GIT_SYNC_SSH\n            value: \"true\"\n          - name: GIT_SSH_KEY_FILE\n            value: \"/secrets/git-sync-rsa\"\n          - name: GIT_KNOWN_HOSTS\n            value: \"false\"\n          - name: GIT_SYNC_MAX_SYNC_FAILURES\n            value: \"10\"\n          - name: GIT_SYNC_WAIT\n            value: \"60\"\n          securityContext:\n            runAsUser: 65534 # git-sync user\n          resources:\n            requests:\n              cpu: 11m\n              memory: 83Mi\n            limits:\n              memory: 83Mi\n          volumeMounts:\n          - name: app-configs\n            mountPath: /configs\n          - name: app-secrets\n            mountPath: /secrets\n        vpa:\n          enabled: true\n          updateMode: \"Off\"\n        request:\n          timeout: 120s\n          maxbodysize: 128M\n          clientbodybuffersize: 1m\n          proxybuffersnumber: 64\n        hosts:\n        - ***\n        - ***\n        internalhosts:\n        - ***\n        - ***\n        basepath: /api\n        chaosproof: true\n        useGoogleCloudCredentials: true\n        disableServiceAccountKeyRotation: false\n        manifests:\n          files:\n          - gke/ingress.yaml\n          - gke/ingress-github.yaml\n          - gke/ingress-bitbucket.yaml\n          - gke/ingress-slack.yaml\n          - gke/ingress-pubsub.yaml\n          - gke/ingress-cloudsource.yaml\n          - gke/integrations-certificate-secret.yaml\n          data:\n            IntegrationsHostname: ***\n            IntegrationsHostname2: ***\n        volumemounts:\n        - name: client-certs\n          mountpath: /cockroach-certs\n          volume:\n            secret:\n              secretName: estafette-ci.client.api\n              defaultMode: 0400\n        - name: app-secrets\n          mountpath: /secrets\n          volume:\n            secret:\n              secretName: estafette-ci-config-secrets\n        - name: app-configs\n          mountpath: /configs\n          volume:\n            emptyDir: {}\n        - name: app-templates\n          mountpath: /templates\n          volume:\n            configMap:\n              name: estafette-ci-manifest-templates-configs\n\n      slack-notify:\n        image: extensions/slack-build-status:dev\n        workspace: estafette\n        channels:\n        - '#release-status'\n        when:\n          status == 'succeeded' ||\n          status == 'failed'\n\n  release-helm-chart:\n    stages:\n      clone-charts-repo:\n        image: extensions/git-clone:dev\n        repo: helm-charts\n        branch: main\n\n      purge-prerelease-helm-charts:\n        image: extensions/helm:dev\n        action: purge\n        repoBranch: main\n\n      create-github-release:\n        image: extensions/github-release:dev\n\n  helm-diff:\n    stages:\n      diff:\n        image: extensions/helm:dev\n        credentials: gke-tooling-estafette\n        action: diff\n        tillerless: true\n        namespace: estafette\n        values: |-\n          jobs:\n            namespace: estafette-ci-jobs\n          secret:\n            decryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n          hostnames:\n          - ***\n          jaeger:\n            enable: true",
  "manifestWithDefaults": "builder:\n  track: dev\n  os: linux\n  medium: memory\n  type: docker\nlabels:\n  app-group: estafette-ci\n  language: golang\n  team: estafette\n  type: service\nversion:\n  semver:\n    major: 1\n    minor: 0\n    patch: \"0\"\n    labelTemplate: '{{branch}}-{{auto}}'\n    releaseBranch: 1.0.0\ntriggers:\n- name: migrator\n  pipeline:\n    event: finished\n    status: succeeded\n    name: github.com/estafette/estafette-ci-db-migrator\n    branch: main\n  builds:\n    branch: main\nstages:\n  build-lint-and-package:\n    when: status == 'succeeded'\n    parallelStages:\n    - image: golang:1.16-alpine\n      shell: /bin/sh\n      workDir: /estafette-work\n      commands:\n      - go build -a -installsuffix cgo -ldflags \"-X main.appgroup=${ESTAFETTE_LABEL_APP_GROUP}\n        -X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION}\n        -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH}\n        -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}\" -o ./publish/${ESTAFETTE_GIT_NAME}\n        .\n      when: status == 'succeeded'\n      env:\n        CGO_ENABLED: \"0\"\n        GOGC: \"false\"\n        GOOS: linux\n    - image: golang:1.16-alpine\n      shell: /bin/sh\n      workDir: /estafette-work\n      commands:\n      - apk add --update --no-cache build-base\n      - go test -short -race ./...\n      when: status == 'succeeded'\n    - image: extensions/helm:dev\n      shell: /bin/sh\n      workDir: /estafette-work\n      when: status == 'succeeded'\n      action: lint\n    - image: extensions/helm:dev\n      shell: /bin/sh\n      workDir: /estafette-work\n      when: status == 'succeeded'\n      action: package\n  integration-tests-prepare:\n    image: estafette/estafette-ci-db-migrator:${ESTAFETTE_TRIGGER_MIGRATOR_BUILD_VERSION}\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    env:\n      COCKROACH_INSECURE: \"true\"\n      ESTAFETTE_LOG_FORMAT: console\n    services:\n    - name: estafette-ci-db-public\n      image: cockroachdb/cockroach:v21.1.1\n      shell: /bin/bash\n      commands:\n      - /cockroach/cockroach start-single-node --insecure --advertise-addr estafette-ci-db-public\n      multiStage: true\n      when: status == 'succeeded'\n      env:\n        COCKROACH_SKIP_ENABLING_DIAGNOSTIC_REPORTING: \"true\"\n      readiness:\n        path: /health?ready=1\n        timeoutSeconds: 120\n        port: 8080\n        protocol: http\n        hostname: estafette-ci-db-public\n  integration-tests:\n    image: golang:1.16-alpine\n    shell: /bin/sh\n    workDir: /estafette-work\n    commands:\n    - go test -run TestIntegration ./...\n    when: status == 'succeeded'\n    env:\n      CGO_ENABLED: \"0\"\n      GOGC: \"false\"\n      GOOS: linux\n  bake:\n    image: extensions/docker:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    action: build\n    copy:\n    - /etc/ssl/certs/ca-certificates.crt\n    inline: |\n      FROM scratch\n\n      LABEL maintainer=\"estafette.io\" \\\n            description=\"The ${ESTAFETTE_GIT_NAME} is the component that handles api requests and starts build jobs using the estafette-ci-builder\"\n\n      COPY ca-certificates.crt /etc/ssl/certs/\n      COPY ${ESTAFETTE_GIT_NAME} /\n\n      ENV GRACEFUL_SHUTDOWN_DELAY_SECONDS=\"20\" \\\n          ESTAFETTE_LOG_FORMAT=\"json\"\n\n      ENTRYPOINT [\"/${ESTAFETTE_GIT_NAME}\"]\n    path: ./publish\n    repositories:\n    - estafette\n    severity: unknown\n  push-to-docker-hub:\n    image: extensions/docker:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    action: push\n    repositories:\n    - estafette\n  test-helm-chart-1.17:\n    image: extensions/helm:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    services:\n    - name: kubernetes\n      image: bsycorp/kind:latest-1.17\n      shell: /bin/sh\n      multiStage: false\n      when: status == 'succeeded'\n      readiness:\n        path: /kubernetes-ready\n        timeoutSeconds: 120\n        port: 10080\n        protocol: http\n        hostname: kubernetes\n    action: test\n    values: |-\n      deployment:\n        env:\n        - name: JAEGER_DISABLED\n          value: 'true'\n      secret:\n        files:\n          secretDecryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n      ingress:\n        enabled: true\n        hosts:\n        - host: ci.estafette.io\n          paths:\n          - path: /api/\n            backend:\n              serviceName: estafette-ci-api\n              servicePort: http\n          - path: /\n            backend:\n              serviceName: estafette-ci-web\n              servicePort: http\n      ingressWebhooks:\n        enabled: true\n        hosts:\n        - host: ci-webhook.estafette.io\n          paths:\n          - path: /api/integrations/github/\n            backend:\n              serviceName: estafette-ci-api\n              servicePort: http\n\n      extraLabels:\n        team: estafette\n\n      extraSecrets:\n      - key: gcp\n        annotations: {}\n        mountPath: /gcp\n        data:\n          service-account-key.json: |\n            {}\n\n      extraConfigmaps:\n      - key: templates\n        annotations: {}\n        mountPath: /templates\n        data: |\n          manifest-docker.tmpl: |\n            labels:\n              container: {{.ContainerName}}\n              team: {{.TeamName}}\n              language: docker\n\n            stages:\n              bake:\n                image: extensions/docker:stable\n                action: build\n                repositories:\n                - estafette\n\n              push-to-docker-registry:\n                image: extensions/docker:stable\n                action: push\n                repositories:\n                - estafette\n  test-helm-chart-1.19:\n    image: extensions/helm:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    services:\n    - name: kubernetes\n      image: bsycorp/kind:latest-1.19\n      shell: /bin/sh\n      multiStage: false\n      when: status == 'succeeded'\n      readiness:\n        path: /kubernetes-ready\n        timeoutSeconds: 120\n        port: 10080\n        protocol: http\n        hostname: kubernetes\n    action: test\n    values: |-\n      deployment:\n        env:\n        - name: JAEGER_DISABLED\n          value: 'true'\n      secret:\n        files:\n          secretDecryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n      ingress:\n        enabled: true\n        hosts:\n        - host: ci.estafette.io\n          paths:\n          - path: /api/\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-api\n                port:\n                  name: http\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-web\n                port:\n                  name: http\n      ingressWebhooks:\n        enabled: true\n        hosts:\n        - host: ci-webhook.estafette.io\n          paths:\n          - path: /api/integrations/github/\n            pathType: Prefix\n            backend:\n              service:\n                name: estafette-ci-api\n                port:\n                  name: http\n\n      extraLabels:\n        team: estafette\n\n      extraSecrets:\n      - key: gcp\n        annotations: {}\n        mountPath: /gcp\n        data:\n          service-account-key.json: |\n            {}\n\n      extraConfigmaps:\n      - key: templates\n        annotations: {}\n        mountPath: /templates\n        data: |\n          manifest-docker.tmpl: |\n            labels:\n              container: {{.ContainerName}}\n              team: {{.TeamName}}\n              language: docker\n\n            stages:\n              bake:\n                image: extensions/docker:stable\n                action: build\n                repositories:\n                - estafette\n\n              push-to-docker-registry:\n                image: extensions/docker:stable\n                action: push\n                repositories:\n                - estafette\n  clone-charts-repo:\n    image: extensions/git-clone:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    branch: main\n    repo: helm-charts\n  publish-helm-chart:\n    image: extensions/helm:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded'\n    action: publish\n    repoBranch: main\n  slack-notify:\n    image: extensions/slack-build-status:dev\n    shell: /bin/sh\n    workDir: /estafette-work\n    when: status == 'succeeded' || status == 'failed'\n    channels:\n    - '#build-status'\n    workspace: estafette\nreleases:\n  tooling-estafette:\n    builder:\n      track: dev\n      os: linux\n      medium: memory\n      type: docker\n    clone: true\n    actions:\n    - name: deploy-canary\n    - name: deploy-stable\n    - name: rollback-canary\n      hideBadge: true\n    - name: restart-stable\n      hideBadge: true\n    stages:\n      deploy:\n        image: extensions/gke:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded'\n        basepath: /api\n        chaosproof: true\n        container:\n          cpu:\n            request: 50m\n          env:\n            CONFIG_FILE_PATH: /configs/git/config.yaml\n            ESTAFETTE_LOG_FORMAT: v3\n          lifecycle:\n            prestopsleep: false\n          memory:\n            limit: 283Mi\n            request: 283Mi\n          metrics:\n            port: 9001\n          repository: estafette\n        customsidecars:\n        - env:\n          - name: GIT_SYNC_REPO\n            value: ***\n          - name: GIT_SYNC_BRANCH\n            value: git-sync\n          - name: GIT_SYNC_DEPTH\n            value: \"1\"\n          - name: GIT_SYNC_ROOT\n            value: /configs\n          - name: GIT_SYNC_DEST\n            value: git\n          - name: GIT_SYNC_SSH\n            value: \"true\"\n          - name: GIT_SSH_KEY_FILE\n            value: /secrets/git-sync-rsa\n          - name: GIT_KNOWN_HOSTS\n            value: \"false\"\n          - name: GIT_SYNC_MAX_SYNC_FAILURES\n            value: \"10\"\n          - name: GIT_SYNC_WAIT\n            value: \"60\"\n          image: k8s.gcr.io/git-sync:v3.1.5\n          name: estafette-ci-api-git-sync\n          resources:\n            limits:\n              memory: 83Mi\n            requests:\n              cpu: 11m\n              memory: 83Mi\n          securityContext:\n            runAsUser: 65534\n          volumeMounts:\n          - mountPath: /configs\n            name: app-configs\n          - mountPath: /secrets\n            name: app-secrets\n        disableServiceAccountKeyRotation: false\n        hosts:\n        - ***\n        - ***\n        iapOauthClientID: ***\n        iapOauthClientSecret: ***\n        imagePullSecretPassword: ***\n        imagePullSecretUser: ***\n        internalhosts:\n        - ***\n        - ***\n        manifests:\n          data:\n            IntegrationsHostname: ***\n            IntegrationsHostname2: ***\n          files:\n          - gke/ingress.yaml\n          - gke/ingress-github.yaml\n          - gke/ingress-bitbucket.yaml\n          - gke/ingress-slack.yaml\n          - gke/ingress-pubsub.yaml\n          - gke/ingress-cloudsource.yaml\n          - gke/integrations-certificate-secret.yaml\n        namespace: estafette-ci\n        request:\n          clientbodybuffersize: 1m\n          maxbodysize: 128M\n          proxybuffersnumber: 64\n          timeout: 120s\n        sidecars:\n        - cpu:\n            request: 23m\n          memory:\n            limit: 83Mi\n            request: 83Mi\n          type: openresty\n        useGoogleCloudCredentials: true\n        visibility: iap\n        volumemounts:\n        - mountpath: /cockroach-certs\n          name: client-certs\n          volume:\n            secret:\n              defaultMode: 256\n              secretName: estafette-ci.client.api\n        - mountpath: /secrets\n          name: app-secrets\n          volume:\n            secret:\n              secretName: estafette-ci-config-secrets\n        - mountpath: /configs\n          name: app-configs\n          volume:\n            emptyDir: {}\n        - mountpath: /templates\n          name: app-templates\n          volume:\n            configMap:\n              name: estafette-ci-manifest-templates-configs\n        vpa:\n          enabled: true\n          updateMode: \"Off\"\n      slack-notify:\n        image: extensions/slack-build-status:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded' || status == 'failed'\n        channels:\n        - '#release-status'\n        workspace: estafette\n  release-helm-chart:\n    builder:\n      track: dev\n      os: linux\n      medium: memory\n      type: docker\n    clone: false\n    stages:\n      clone-charts-repo:\n        image: extensions/git-clone:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded'\n        branch: main\n        repo: helm-charts\n      purge-prerelease-helm-charts:\n        image: extensions/helm:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded'\n        action: purge\n        repoBranch: main\n      create-github-release:\n        image: extensions/github-release:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded'\n  helm-diff:\n    builder:\n      track: dev\n      os: linux\n      medium: memory\n      type: docker\n    clone: false\n    stages:\n      diff:\n        image: extensions/helm:dev\n        shell: /bin/sh\n        workDir: /estafette-work\n        when: status == 'succeeded'\n        action: diff\n        credentials: gke-tooling-estafette\n        namespace: estafette\n        tillerless: true\n        values: |-\n          jobs:\n            namespace: estafette-ci-jobs\n          secret:\n            decryptionKey: 1PsvXVOMkhfAQuBIcIGCtzIdPXNV0NYG\n          hostnames:\n          - ***\n          jaeger:\n            enable: true\n",
  "commits": [
    {
      "message": "don't log X-Estafette-Event",
      "author": {
        "email": "me@estafette.io",
        "name": "Just Me",
        "username": "JustMe"
      }
    }
  ],
  "triggers": [
    {
      "name": "migrator",
      "pipeline": {
        "event": "finished",
        "status": "succeeded",
        "name": "github.com/estafette/estafette-ci-db-migrator",
        "branch": "main"
      },
      "builds": {
        "branch": "main"
      }
    }
  ],
  "triggerEvents": [
    {
      "fired": true,
      "git": {
        "event": "push",
        "repository": "github.com/estafette/estafette-ci-api",
        "branch": "main"
      }
    }
  ],
  "insertedAt": "2021-06-03T07:44:56.260568Z",
  "startedAt": "2021-06-03T07:46:06.777873Z",
  "updatedAt": "2021-06-03T07:52:52.335078Z",
  "duration": 405000000000,
  "pendingDuration": 70000000000,
  "organizations": [
    {
      "name": "Estafette"
    }
  ]
}